{"version":3,"sources":["App.js","reportWebVitals.js","data/languages.js","context/PagesContext.js","hooks/useWindowSize.js","index.js"],"names":["App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PagesContext","createContext","PagesContextProvider","children","useState","undefined","currentRef","setCurrentRef","pageInfo","_setPageInfo","imageElement","_setImageElement","lastAppIndex","setLastAppIndex","windowSize","width","window","innerWidth","height","innerHeight","size","setSize","handleResize","useCallback","debounce","useEffect","addEventListener","cancel","removeEventListener","useWindowSize","isTouch","LANGUAGES","language","setLanguage","Provider","value","ref","setPageInfo","obj","highlightColor","document","documentElement","style","setProperty","mainColor","setImageElement","element","getBoundingClientRect","top","left","src","currentSrc","updateSize","current","body","ReactDOM","render","StrictMode","getElementById"],"mappings":"iLA0GeA,MApFf,WA0CE,OACE,qBAAKC,UAAU,SCrDJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCPC,MAET,KCEAQ,EAAeC,0BAErB,SAASC,EAAT,GAA2C,IAAZC,EAAW,EAAXA,SAAW,EACFC,wBAASC,GADP,mBAC/BC,EAD+B,KACnBC,EADmB,OAEHH,mBAAS,IAFN,mBAE9BI,EAF8B,KAEpBC,EAFoB,OAGKL,wBAASC,GAHd,mBAG9BK,EAH8B,KAGhBC,EAHgB,OAIIP,wBAASC,GAJb,mBAI9BO,EAJ8B,KAIhBC,EAJgB,KAKhCC,ECRK,WAA0B,IAAD,EACZV,mBAAS,CAC7BW,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAHiB,mBAC7BC,EAD6B,KACvBC,EADuB,KAe9BC,EAAeC,sBAAYC,oBATd,kBACfH,EACI,CACIN,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,gBAK2B,KAAM,IAU5D,OARAM,qBAAW,WAEP,OADAT,OAAOU,iBAAiB,SAAUJ,GAC3B,WACHA,EAAaK,SACbX,OAAOY,oBAAoB,SAAUN,MAE1C,IAEIF,EDjBYS,GACbC,EAAU,iBAAkBd,OANI,EAOJZ,mBAAS2B,GAPL,mBAO9BC,EAP8B,KAOpBC,EAPoB,KAyCtC,OACI,cAACjC,EAAakC,SAAd,CAAuBC,MACnB,CACI7B,aACAC,cApCG,eAAC6B,EAAD,4DAAO/B,EAAP,OAAqBE,EAAc6B,IAqCtC5B,WACA6B,YAhCQ,WAAe,IAAdC,EAAa,uDAAP,GACpBA,EAAIC,gBACHC,SAASC,gBAAgBC,MAAMC,YAAY,oBAAqBL,EAAIC,gBACpEC,SAASC,gBAAgBC,MAAMC,YAAY,eAAgBL,EAAIM,YAC1DN,EAAIM,YACTJ,SAASC,gBAAgBC,MAAMC,YAAY,eAAgBL,EAAIM,WAC/DJ,SAASC,gBAAgBC,MAAMC,YAAY,oBAAqBL,EAAIM,YAExEnC,EAAa6B,IAyBL5B,eACAmC,gBAvBY,WAA0B,IAAzBC,EAAwB,4DAAdzC,EAC/B,GAAGyC,EAAQ,CAAC,IAAD,EACeA,EAAQC,wBAAtBC,EADD,EACCA,IAAKC,EADN,EACMA,KACbtC,EAAiB,CACbuC,IAAKJ,EAAQK,WACbT,MAAO,CACH3B,MAAO+B,EAAQ/B,MACfG,OAAQ4B,EAAQ5B,OAChB8B,MACAC,eAGNtC,OAAiBN,IAYfS,aACAsC,WAxCO,WACZ9C,GAAcA,EAAW+C,UAASb,SAASc,KAAKZ,MAAM3B,MAApB,UAA+BT,EAAW+C,QAAQN,wBAAwBhC,MAA1E,QAwC7BH,eACAC,kBACAiB,UACAE,WACAC,eAdR,SAkBQ9B,IE1DhBoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACvD,EAAD,UACE,cAAC,EAAD,UAINsC,SAASkB,eAAe,SAM1BnE,M","file":"static/js/main.229cedd1.chunk.js","sourcesContent":["// import { useContext, useEffect } from \"react\"\n// import { Switch, Route, Redirect } from \"react-router-dom\"\n// import { PagesContext } from \"./context/PagesContext\"\n// import Home from \"./pages/Home\"\n// import About from \"./pages/About\"\n// import Jobs from \"./pages/Jobs\"\n// import PAGES_URL from \"./data/pagesURL\"\n// import AppDetails from \"./pages/jobs/AppDetails\"\n// import Skills from \"./pages/Skills\"\n// import Navbar from \"./components/Navbar\"\n// import GlitchText from \"./components/GlitchText\"\n// import BlurryText from \"./components/BlurryText\"\n// import PagesSelector from \"./components/PagesSelector\"\n// import Contact from \"./pages/Contact\"\n\n// import './App.css';\n// import \"./css/StandardGlitchText.css\"\n\n// String.prototype.capitalize = function(){\n//   return this.charAt(0).toUpperCase() + this.slice(1);\n// };\n\nfunction App() {\n//   const { currentRef, pageInfo, imageElement, setImageElement, windowSize, language } = useContext(PagesContext)\n//   const deltaX = 50\n\n//   const scrollingConfig = {\n//       ease: .1,\n//       current: 0,\n//       previous: 0\n//   }\n\n//   const handleWheel = (e) => {\n//     const scrolled = e.deltaY || e.deltaX\n//     window.scrollBy(scrolled<0?-deltaX:deltaX,0)\n//   }\n\n//   useEffect(() => {\n//     window.addEventListener(\"wheel\", handleWheel)\n//     return () => { \n//         window.removeEventListener(\"wheel\", handleWheel)\n//         document.body.style.height = `100%`\n//     }\n//   }, [])\n\n//   useEffect(() => {\n//     if(currentRef) requestAnimationFrame(scrolling)\n//   }, [currentRef])\n  \n//   useEffect(() => {\n//     if(currentRef) document.body.style.width = `${currentRef.current.getBoundingClientRect().width}px`\n//     else document.body.style.width = \"100%\"\n//   }, [windowSize.width, currentRef])\n\n//   const scrolling = () => {\n//       if(currentRef && currentRef.current){\n//           scrollingConfig.current = window.scrollX;\n//           scrollingConfig.previous += Math.round((scrollingConfig.current - scrollingConfig.previous) * scrollingConfig.ease)\n  \n//           currentRef.current.style.transform = `translate3d(-${scrollingConfig.previous}px,0,0)`\n//           requestAnimationFrame(scrolling)\n//       }\n//   }\n\n  return (\n    <div className=\"App\">\n        {/* <div onClick={() => {setImageElement()}} className={`image-focus ${imageElement? \"showing\": \"hidden\"}`}>\n          <button>&times;</button>\n          { imageElement && <img \n              src={ imageElement.src }\n              alt=\"Zoom\"\n              onClick={(e) => e.stopPropagation()}\n              style={ imageElement.style }\n            />\n          }\n        </div>\n\n        <div className={`scrollable-container page ${pageInfo.dark && \"dark\"}`}>\n          <Navbar dark={pageInfo.dark} language={language}/>\n          { pageInfo.name && \n            <GlitchText\n              key={new Date().getTime()} \n              text={pageInfo.name} \n              repetitions={3} \n              color={pageInfo.mainColor}\n              quick={pageInfo.quick}\n            />\n          }\n          { pageInfo.pagination && <PagesSelector items={pageInfo.pagination}/> }\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path={PAGES_URL.ABOUT} component={About}/>\n            <Route path={PAGES_URL.SKILLS} component={Skills}/>\n            <Route exact path={PAGES_URL.JOBS} component={Jobs}/>\n            <Route exact path={PAGES_URL.CONTACT} component={Contact}/>\n            <Route path={`${PAGES_URL.JOBS}/:appID`} component={AppDetails}/>\n            <Route path=\"*\">\n              <Redirect to=\"/\"/>\n            </Route>\n          </Switch>\n        { pageInfo.blurryText && <BlurryText key={pageInfo.blurryText} text={pageInfo.blurryText}/> }\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default {\r\n  br: \"br\",\r\n  en: \"en\"\r\n}","import { useState, createContext } from \"react\";\r\nimport useWindowSize from \"../hooks/useWindowSize\";\r\nimport LANGUAGES from \"../data/languages\";\r\n\r\nconst PagesContext = createContext()\r\n\r\nfunction PagesContextProvider({children}) {\r\n    const [currentRef, setCurrentRef] = useState(undefined);\r\n    const [ pageInfo, _setPageInfo ] = useState({});\r\n    const [ imageElement, _setImageElement ] = useState(undefined);\r\n    const [ lastAppIndex, setLastAppIndex ] = useState(undefined);\r\n    const windowSize = useWindowSize();\r\n    const isTouch = \"ontouchstart\" in window;\r\n    const [ language, setLanguage ] = useState(LANGUAGES.en);\r\n\r\n    const setRef = (ref = undefined) => setCurrentRef(ref)\r\n\r\n    const updateSize = () => {\r\n        if(currentRef && currentRef.current) document.body.style.width = `${currentRef.current.getBoundingClientRect().width}px`\r\n    }\r\n\r\n    const setPageInfo = (obj = {}) => {\r\n        if(obj.highlightColor){\r\n            document.documentElement.style.setProperty(\"--highlight-color\", obj.highlightColor)\r\n            document.documentElement.style.setProperty(\"--main-color\", obj.mainColor)\r\n        }else if(obj.mainColor){\r\n            document.documentElement.style.setProperty(\"--main-color\", obj.mainColor)\r\n            document.documentElement.style.setProperty(\"--highlight-color\", obj.mainColor)\r\n        }\r\n        _setPageInfo(obj)\r\n    }\r\n\r\n    const setImageElement = (element = undefined) => {\r\n        if(element){\r\n            const { top, left } = element.getBoundingClientRect()\r\n            _setImageElement({\r\n                src: element.currentSrc,\r\n                style: {\r\n                    width: element.width,\r\n                    height: element.height,\r\n                    top,\r\n                    left\r\n                }\r\n            })\r\n        }else _setImageElement(undefined)\r\n    }\r\n\r\n    return (\r\n        <PagesContext.Provider value={\r\n            { \r\n                currentRef, \r\n                setCurrentRef: setRef, \r\n                pageInfo, \r\n                setPageInfo, \r\n                imageElement, \r\n                setImageElement,\r\n                windowSize,\r\n                updateSize,\r\n                lastAppIndex,\r\n                setLastAppIndex,\r\n                isTouch,\r\n                language,\r\n                setLanguage\r\n            }\r\n        }>\r\n            {\r\n                children\r\n            }\r\n        </PagesContext.Provider>\r\n    )\r\n}\r\n\r\nexport { PagesContextProvider, PagesContext }","import { useState, useEffect, useCallback } from \"react\"\r\nimport { debounce } from \"lodash\"\r\n\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    })\r\n\r\n    const updateSize = () => (\r\n        setSize(\r\n            {\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            }\r\n        )\r\n    )\r\n\r\n    const handleResize = useCallback(debounce(updateSize, 500), [])\r\n\r\n    useEffect( () => {\r\n        window.addEventListener(\"resize\", handleResize)\r\n        return () => {\r\n            handleResize.cancel()\r\n            window.removeEventListener(\"resize\", handleResize)\r\n        }\r\n    }, [])\r\n\r\n    return size\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PagesContextProvider } from './context/PagesContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <PagesContextProvider>\n        <App />\n      </PagesContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}